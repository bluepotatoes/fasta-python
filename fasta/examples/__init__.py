"""A collection of various example optimization problems that can be solved using the FASTA algorithm.

These problems serve both as readable examples and as tests that the FASTA algorithm is working properly.
"""

from abc import ABCMeta, abstractclassmethod, abstractstaticmethod
from typing import Any, Tuple

from fasta import Convergence

__author__ = "Noah Singer"

__all__ = ["ExampleProblem", "print_info", "test_modes"]


TOLERANCE = 1E-5


class ExampleProblem(metaclass=ABCMeta):
    """Base class for example problems.

    Every example problem implements this class, which allows this testing script to have a common interface to each
    problem.
    """

    def solve(self, initial_guess: Any, fasta_options: dict=None) -> Tuple[Any, Convergence]:
        """Solve this problem.

        :param initial_guess: An initial guess for the solution of the problem (often generated by construct())
        :param fasta_options: Options for the FASTA algorithm to use when solving this problem (default: NO_ARGS)
        :return: The computed solution for the problem and the full output of the FASTA algorithm on it
        """
        pass

    @abstractstaticmethod
    def construct(self) -> Tuple["ExampleProblem", Any]:
        """Construct an example of this type of problem.

        Generally, this function has default arguments, which specify default parameters for this type of problem (e.g.
        regularization parameters or sizes of the unknown signal or measurement matrix).

        :return: An example of this type of problem and a good initial guess for its solution
        """
        pass

    def plot(self, solution: Any) -> None:
        """Plot a computed solution to this problem.

        :param solution: The solution computed by the FASTA algorithm
        """
        pass


def print_info(solution: Convergence) -> None:
    """Print information on how the FASTA algorithm converged.

    :param solution: Information on an execution of the FASTA algorithm
    """
    print("Completed in {} iterations, {:f} seconds.".format(solution.iteration_count,
                                                             solution.times[solution.iteration_count] - solution.times[0]))


def test_modes(problem: ExampleProblem, x0: Any) -> Tuple[Tuple[Any, Convergence],
                                                                 Tuple[Any, Convergence],
                                                                 Tuple[Any, Convergence]]:
    """Test the plain, adaptive, and accelerated modes of the FASTA algorithm on a given example problem.

    :param problem: A problem to test the various modes of the FASTA algorithm on
    :param x0: A good initial guess for the problem's solution
    """
    print()

    print("Computing adaptive FBS.")
    adaptive = problem.solve(x0, {'tolerance': TOLERANCE, 'evaluate_objective': True, 'adaptive': True, 'accelerate': False})
    print_info(adaptive[1])

    print()

    print("Computing accelerated FBS.")
    accelerated = problem.solve(x0, {'tolerance': TOLERANCE, 'evaluate_objective': True, 'adaptive': False, 'accelerate': True})
    print_info(accelerated[1])

    print()

    print("Computing plain FBS.")
    plain = problem.solve(x0, {'tolerance': TOLERANCE, 'evaluate_objective': True, 'adaptive': False, 'accelerate': False})
    print_info(plain[1])

    print()

    return adaptive, accelerated, plain
